function [stateNew_VG] = update_state(grid,state_VG,faceFlux,source_VG,dt)
%update_state Summary of this function goes here
%   Detailed explanation goes here

stateNew_VG = state_VG;

CellSize_D = grid.CellSize_D;

iMin = Parameters.iMin;
iMax = Parameters.iMax;
jMin = Parameters.jMin;
jMax = Parameters.jMax;
kMin = Parameters.kMin;
kMax = Parameters.kMax;
Rho_ = Parameters.Rho_;
P_   = Parameters.P_;
E_   = Parameters.E_;
U_   = Parameters.U_;
B_   = Parameters.B_;
Bz_  = Parameters.Bz_;

Flux_VX = faceFlux.Flux_VX;
Flux_VY = faceFlux.Flux_VY;
Flux_VZ = faceFlux.Flux_VZ;

if Parameters.GridType == 'Cartesian'
   % no need for volume and face
  
   if ~Parameters.UseConservative
      stateNew_VG(:,iMin:iMax,jMin:jMax,kMin:kMax) = ...
         state_VG(:,iMin:iMax,jMin:jMax,kMin:kMax) - dt.*(...
         (Flux_VX(:,2:end,:,:) - Flux_VX(:,1:end-1,:,:))/CellSize_D(1) +...
         (Flux_VY(:,:,2:end,:) - Flux_VY(:,:,1:end-1,:))/CellSize_D(2) +...
         (Flux_VZ(:,:,:,2:end) - Flux_VZ(:,:,:,1:end-1))/CellSize_D(3))+...
         source_VG;
   else
      stateNew_VG(Rho_:Bz_,iMin:iMax,jMin:jMax,kMin:kMax) = ...
         state_VG(Rho_:Bz_,iMin:iMax,jMin:jMax,kMin:kMax) - dt.*(...
         (Flux_VX(Rho_:Bz_,2:end,:,:) - Flux_VX(Rho_:Bz_,1:end-1,:,:))/...
         CellSize_D(1) + ...
         (Flux_VY(Rho_:Bz_,:,2:end,:) - Flux_VY(Rho_:Bz_,:,1:end-1,:))/...
         CellSize_D(2) + ...
         (Flux_VZ(Rho_:Bz_,:,:,2:end) - Flux_VZ(Rho_:Bz_,:,:,1:end-1))/...
         CellSize_D(3))+ ...
         source_VG(Rho_:Bz_,:,:,:);
      
      gamma = Const.gamma;
      
      state_VG(E_,iMin:iMax,jMin:jMax,kMin:kMax) = ...
         state_VG(P_,iMin:iMax,jMin:jMax,kMin:kMax) / (gamma-1) + ...
         0.5./state_VG(Rho_,iMin:iMax,jMin:jMax,kMin:kMax).*...
         sum(state_VG(U_,iMin:iMax,jMin:jMax,kMin:kMax).^2,1) + ...
         0.5*sum(state_VG(B_,iMin:iMax,jMin:jMax,kMin:kMax),1);
              
      stateNew_VG(E_,iMin:iMax,jMin:jMax,kMin:kMax) = ...
         state_VG(E_,iMin:iMax,jMin:jMax,kMin:kMax) - dt.*(...
         (Flux_VX(E_,2:end,:,:) - Flux_VX(E_,1:end-1,:,:))/...
         CellSize_D(1) + ...
         (Flux_VY(E_,:,2:end,:) - Flux_VY(E_,:,1:end-1,:))/...
         CellSize_D(2) + ...
         (Flux_VZ(E_,:,:,2:end) - Flux_VZ(E_,:,:,1:end-1))/...
         CellSize_D(3))+ ...
         source_VG(E_,:,:,:);
      
      stateNew_VG(P_,iMin:iMax,jMin:jMax,kMin:kMax) = (gamma-1)* ...
         (stateNew_VG(E_,iMin:iMax,jMin:jMax,kMin:kMax) - ...
         0.5./stateNew_VG(Rho_,iMin:iMax,jMin:jMax,kMin:kMax).*...
         sum(stateNew_VG(U_,iMin:iMax,jMin:jMax,kMin:kMax).^2,1) - ...
         0.5*sum(stateNew_VG(B_,iMin:iMax,jMin:jMax,kMin:kMax),1) );
   end

%       fprintf('fluxDiff=%12.5f\n',faceFlux.Flux_VX(:,2:end,:,:) - ...
%          faceFlux.Flux_VX(:,1:end-1,:,:))
   
%       dt.*(faceFlux.Flux_VX(:,2:end,:,:) - ...
%          faceFlux.Flux_VX(:,1:end-1,:,:))/CellSize_D(1)
   
%    stateNew_VG(:,iMin:iMax,jMin:jMax,kMin:kMax) = ...
%       state_VG(:,iMin:iMax,jMin:jMax,kMin:kMax) - DeltaState_VG;

else
   % need volume and face
   stateNew_VG = 0;
   
end

end

