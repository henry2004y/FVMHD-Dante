classdef FaceFlux < handle
   %FaceFlux Class of fluxes
   % This class holds all data and operations pertinent to the fluxes.
   
   %======================== MEMBERS =================================
   properties (GetAccess = public, SetAccess = private)
      Flux_XV(:,:,:,:)  double {mustBeReal}
      Flux_YV(:,:,:,:)  double {mustBeReal}
      Flux_ZV(:,:,:,:)  double {mustBeReal}
   end
   
   properties (GetAccess = private, SetAccess = private)
      faceValue % Face values
   end
   
   %======================== CONSTRUCTORS ============================
   methods (Access = public)
      function obj = FaceFlux(faceValue)
         % Initialize an instance of this class
                  
         obj.faceValue = faceValue;
      end
   end
   
   %======================== METHODS =================================
   methods (Access = public)
      function obj = calc_face_flux(obj)
         % Calculate the face fluxes in generalized coordinates from face
         % values on the left and right of the face
         %-----------------------------------------------------------------
                  
         obj.get_physical_flux;
         obj.add_numerical_flux;
      end
      
      function get_physical_flux(obj)
         % Calculate the physical fluxes
         %INPUT:
         %  FaceValue Class object
         %OUTPUT:
         %  Fluxes in 3 directions
         %-----------------------------------------------------------------
         
         % Aliases
         LState_XV = obj.faceValue.LState_XV;
         RState_XV = obj.faceValue.RState_XV;
         LState_YV = obj.faceValue.LState_YV;
         RState_YV = obj.faceValue.RState_YV;
         LState_ZV = obj.faceValue.LState_ZV;
         RState_ZV = obj.faceValue.RState_ZV;
             
         nVar = Parameters.nVar;
         GridSize = Parameters.GridSize;

         Rho_ = Parameters.Rho_;
         Ux_  = Parameters.Ux_;
         Uy_  = Parameters.Uy_;
         Uz_  = Parameters.Uz_;
         Bx_  = Parameters.Bx_;
         By_  = Parameters.By_;
         Bz_  = Parameters.Bz_;
         P_   = Parameters.P_;
         E_   = Parameters.E_;
         U_   = Parameters.U_;
         B_   = Parameters.B_;
         
         LFlux_XV = Inf([GridSize+[1 0 0],nVar]);
         RFlux_XV = Inf([GridSize+[1 0 0],nVar]);
         LFlux_YV = Inf([GridSize+[0 1 0],nVar]);
         RFlux_YV = Inf([GridSize+[0 1 0],nVar]);
         LFlux_ZV = Inf([GridSize+[0 0 1],nVar]);
         RFlux_ZV = Inf([GridSize+[0 0 1],nVar]);
         
         % Density flux
         LFlux_XV(:,:,:,Rho_) = LState_XV(:,:,:,Ux_);
         RFlux_XV(:,:,:,Rho_) = RState_XV(:,:,:,Ux_);
         LFlux_YV(:,:,:,Rho_) = LState_YV(:,:,:,Uy_);
         RFlux_YV(:,:,:,Rho_) = RState_YV(:,:,:,Uy_);
         LFlux_ZV(:,:,:,Rho_) = LState_ZV(:,:,:,Uz_);
         RFlux_ZV(:,:,:,Rho_) = RState_ZV(:,:,:,Uz_);
         
         % Momentum flux
         LFlux_XV(:,:,:,Ux_) = ...
            LState_XV(:,:,:,Ux_).^2 ./ LState_XV(:,:,:,Rho_) + ...
            LState_XV(:,:,:,P_) + ...
            0.5*sum(LState_XV(:,:,:,B_).^2,4) - ...
            LState_XV(:,:,:,Bx_).^2;
         RFlux_XV(:,:,:,Ux_) = ...
            RState_XV(:,:,:,Ux_).^2 ./ RState_XV(:,:,:,Rho_) + ...
            RState_XV(:,:,:,P_) + ...
            0.5*sum(RState_XV(:,:,:,B_).^2,4) - ...
            RState_XV(:,:,:,Bx_).^2;
         LFlux_XV(:,:,:,Uy_) = LState_XV(:,:,:,Ux_) .* ...
            LState_XV(:,:,:,Uy_) ./ LState_XV(:,:,:,Rho_) - ...
            LState_XV(:,:,:,Bx_).*LState_XV(:,:,:,By_);
         RFlux_XV(:,:,:,Uy_) = RState_XV(:,:,:,Ux_) .* ...
            RState_XV(:,:,:,Uy_) ./ RState_XV(:,:,:,Rho_) - ...
            RState_XV(:,:,:,Bx_).*RState_XV(:,:,:,By_);
         LFlux_XV(:,:,:,Uz_) = LState_XV(:,:,:,Ux_) .* ...
            LState_XV(:,:,:,Uz_) ./ LState_XV(:,:,:,Rho_)- ...
            LState_XV(:,:,:,Bx_).*LState_XV(:,:,:,Bz_);
         RFlux_XV(:,:,:,Uz_) = RState_XV(:,:,:,Ux_) .* ...
            RState_XV(:,:,:,Uz_) ./ RState_XV(:,:,:,Rho_) - ...
            RState_XV(:,:,:,Bx_).*RState_XV(:,:,:,Bz_);
         
         LFlux_YV(:,:,:,Ux_) = LState_YV(:,:,:,Uy_) .* ...
            LState_YV(:,:,:,Ux_) ./ LState_YV(:,:,:,Rho_) - ...
            LState_YV(:,:,:,By_).*LState_YV(:,:,:,Bx_);
         RFlux_YV(:,:,:,Ux_) = RState_YV(:,:,:,Uy_) .* ...
            RState_YV(:,:,:,Ux_) ./ RState_YV(:,:,:,Rho_) - ...
            RState_YV(:,:,:,By_).*RState_YV(:,:,:,Bx_);
         LFlux_YV(:,:,:,Uy_) = ...
            LState_YV(:,:,:,Uy_).^2 ./ LState_YV(:,:,:,Rho_) + ...
            LState_YV(:,:,:,P_) + ...
            0.5*sum(LState_YV(:,:,:,B_).^2,4) - ...
            LState_YV(:,:,:,By_).^2;
         RFlux_YV(:,:,:,Uy_) = ...
            RState_YV(:,:,:,Uy_).^2 ./ RState_YV(:,:,:,Rho_) + ...
            RState_YV(:,:,:,P_) + ...
            0.5*sum(RState_YV(:,:,:,B_).^2,4) - ...
            RState_YV(:,:,:,By_).^2;
         LFlux_YV(:,:,:,Uz_) = LState_YV(:,:,:,Uy_) .* ...
            LState_YV(:,:,:,Uz_) ./ LState_YV(:,:,:,Rho_)- ...
            LState_YV(:,:,:,Bx_).*LState_YV(:,:,:,Bz_);
         RFlux_YV(:,:,:,Uz_) = RState_YV(:,:,:,Uy_) .* ...
            RState_YV(:,:,:,Uz_) ./ RState_YV(:,:,:,Rho_)- ...
            RState_YV(:,:,:,Bx_).*RState_YV(:,:,:,Bz_);
         
         LFlux_ZV(:,:,:,Ux_) = LState_ZV(:,:,:,Uz_) .* ...
            LState_ZV(:,:,:,Ux_) ./ LState_ZV(:,:,:,Rho_)- ...
            LState_ZV(:,:,:,Bz_).*LState_ZV(:,:,:,Bx_);
         RFlux_ZV(:,:,:,Ux_) = RState_ZV(:,:,:,Uz_) .* ...
            RState_ZV(:,:,:,Ux_) ./ RState_ZV(:,:,:,Rho_)- ...
            RState_ZV(:,:,:,Bz_).*RState_ZV(:,:,:,Bx_);
         LFlux_ZV(:,:,:,Uy_) = LState_ZV(:,:,:,Uz_) .* ...
            LState_ZV(:,:,:,Uy_) ./ LState_ZV(:,:,:,Rho_)- ...
            LState_ZV(:,:,:,Bz_).*LState_ZV(:,:,:,By_);
         RFlux_ZV(:,:,:,Uy_) = RState_ZV(:,:,:,Uz_) .* ...
            RState_ZV(:,:,:,Uy_) ./ RState_ZV(:,:,:,Rho_)- ...
            RState_ZV(:,:,:,Bz_).*RState_ZV(:,:,:,By_);
         LFlux_ZV(:,:,:,Uz_) = ...
            LState_ZV(:,:,:,Uz_).^2 ./ LState_ZV(:,:,:,Rho_) + ...
            LState_ZV(:,:,:,P_) + ...
            0.5*sum(LState_ZV(:,:,:,B_).^2,4) - ...
            LState_ZV(:,:,:,Bz_).^2;
         RFlux_ZV(:,:,:,Uz_) = ...
            RState_ZV(:,:,:,Uz_).^2 ./ RState_ZV(:,:,:,Rho_) + ...
            RState_ZV(:,:,:,P_) + ...
            0.5*sum(RState_ZV(:,:,:,B_).^2,4) - ...
            RState_ZV(:,:,:,Bz_).^2;
         
         % Magnetic flux
         LFlux_XV(:,:,:,Bx_) = 0;
         RFlux_XV(:,:,:,Bx_) = 0;
         LFlux_XV(:,:,:,By_) = LState_XV(:,:,:,Ux_).*...
            LState_XV(:,:,:,By_) - LState_XV(:,:,:,Bx_).*...
            LState_XV(:,:,:,Uy_);
         RFlux_XV(:,:,:,By_) = RState_XV(:,:,:,Ux_).*...
            RState_XV(:,:,:,By_) - RState_XV(:,:,:,Bx_).*...
            RState_XV(:,:,:,Uy_);
         LFlux_XV(:,:,:,Bz_) = LState_XV(:,:,:,Ux_).*...
            LState_XV(:,:,:,Bz_) - LState_XV(:,:,:,Bx_).*...
            LState_XV(:,:,:,Uz_);
         RFlux_XV(:,:,:,Bz_) = RState_XV(:,:,:,Ux_).*...
            RState_XV(:,:,:,Bz_) - RState_XV(:,:,:,Bx_).*...
            RState_XV(:,:,:,Uz_);
         
         LFlux_YV(:,:,:,Bx_) = LState_YV(:,:,:,Uy_).*...
            LState_YV(:,:,:,Bx_) - LState_YV(:,:,:,By_).*...
            LState_YV(:,:,:,Ux_);
         RFlux_YV(:,:,:,Bx_) = RState_YV(:,:,:,Uy_).*...
            RState_YV(:,:,:,Bx_) - RState_YV(:,:,:,By_).*...
            RState_YV(:,:,:,Ux_);
         LFlux_YV(:,:,:,By_) = 0;
         RFlux_YV(:,:,:,By_) = 0;
         LFlux_YV(:,:,:,Bz_) = LState_YV(:,:,:,Uy_).*...
            LState_YV(:,:,:,Bz_) - LState_YV(:,:,:,By_).*...
            LState_YV(:,:,:,Uz_);
         RFlux_YV(:,:,:,Bz_) = RState_YV(:,:,:,Uy_).*...
            RState_YV(:,:,:,Bz_) - RState_YV(:,:,:,By_).*...
            RState_YV(:,:,:,Uz_);
         
         LFlux_ZV(:,:,:,Bx_) = LState_ZV(:,:,:,Uz_).*...
            LState_ZV(:,:,:,Bx_) - LState_ZV(:,:,:,Bz_).*...
            LState_ZV(:,:,:,Ux_);
         RFlux_ZV(:,:,:,Bx_) = RState_ZV(:,:,:,Uz_).*...
            RState_ZV(:,:,:,Bx_) - RState_ZV(:,:,:,Bz_).*...
            RState_ZV(:,:,:,Ux_);
         LFlux_ZV(:,:,:,By_) = LState_ZV(:,:,:,Uz_).*...
            LState_ZV(:,:,:,By_) - LState_ZV(:,:,:,Bz_).*...
            LState_ZV(:,:,:,Uy_);
         RFlux_ZV(:,:,:,By_) = RState_ZV(:,:,:,Uz_).*...
            RState_ZV(:,:,:,By_) - RState_ZV(:,:,:,Bz_).*...
            RState_ZV(:,:,:,Uy_);
         LFlux_ZV(:,:,:,Bz_) = 0;
         RFlux_ZV(:,:,:,Bz_) = 0;
         
         % Pressure flux / energy flux
         if ~Parameters.UseConservative
            LFlux_XV(:,:,:,P_) = LState_XV(:,:,:,P_).*...
               LState_XV(:,:,:,Ux_)./LState_XV(:,:,:,Rho_);
            RFlux_XV(:,:,:,P_) = RState_XV(:,:,:,P_).*...
               RState_XV(:,:,:,Ux_)./RState_XV(:,:,:,Rho_);
            LFlux_YV(:,:,:,P_) = LState_YV(:,:,:,P_).*...
               LState_YV(:,:,:,Uy_)./LState_YV(:,:,:,Rho_);
            RFlux_YV(:,:,:,P_) = RState_YV(:,:,:,P_).*...
               RState_YV(:,:,:,Uy_)./RState_YV(:,:,:,Rho_);
            LFlux_ZV(:,:,:,P_) = LState_ZV(:,:,:,P_).*...
               LState_ZV(:,:,:,Uz_)./LState_ZV(:,:,:,Rho_);
            RFlux_ZV(:,:,:,P_) = RState_ZV(:,:,:,P_).*...
               RState_ZV(:,:,:,Uz_)./RState_ZV(:,:,:,Rho_);
         else
            % Currently I am using the same index for pressure/energy
            gamma = Const.gamma;
            
            LFlux_XV(:,:,:,E_) = LState_XV(:,:,:,Ux_)./...
               LState_XV(:,:,:,Rho_).* ...
               ((LState_XV(:,:,:,P_) / (gamma-1) + ...
               0.5 ./ LState_XV(:,:,:,Rho_).*...
               sum(LState_XV(:,:,:,U_).^2,4) + ...
               0.5 .* sum(LState_XV(:,:,:,B_).^2,4) + ...
               LState_XV(:,:,:,P_) + ...
               0.5 .* sum(LState_XV(:,:,:,B_).^2,4))) - ...
               sum(LState_XV(:,:,:,U_).*LState_XV(:,:,:,B_),4).*...
               LState_XV(:,:,:,Bx_);
            
            RFlux_XV(:,:,:,E_) = RState_XV(:,:,:,Ux_)./...
               RState_XV(:,:,:,Rho_).* ...
               ((RState_XV(:,:,:,P_) / (gamma-1) + ...
               0.5 ./ RState_XV(:,:,:,Rho_).*...
               sum(RState_XV(:,:,:,U_).^2,4) + ...
               0.5 .* sum(RState_XV(:,:,:,B_).^2,4) + ...
               RState_XV(:,:,:,P_) + ...
               0.5 .* sum(RState_XV(:,:,:,B_).^2,4))) - ...
               sum(RState_XV(:,:,:,U_).*RState_XV(:,:,:,B_),4).*...
               RState_XV(:,:,:,Bx_);
            
            LFlux_YV(:,:,:,E_) = LState_YV(:,:,:,Uy_)./...
               LState_YV(:,:,:,Rho_).* ...
               ((LState_YV(:,:,:,P_) / (gamma-1) + ...
               0.5 ./ LState_YV(:,:,:,Rho_).*...
               sum(LState_YV(:,:,:,U_).^2,4) + ...
               0.5 .* sum(LState_YV(:,:,:,B_).^2,4) + ...
               LState_YV(:,:,:,P_) + ...
               0.5 .* sum(LState_YV(:,:,:,B_).^2,4))) - ...
               sum(LState_YV(:,:,:,U_).*LState_YV(:,:,:,B_),4).*...
               LState_YV(:,:,:,By_);
            
            RFlux_YV(:,:,:,E_) = RState_YV(:,:,:,Uy_)./...
               RState_YV(:,:,:,Rho_).* ...
               ((RState_YV(:,:,:,P_) / (gamma-1) + ...
               0.5 ./ RState_YV(:,:,:,Rho_).*...
               sum(RState_YV(:,:,:,U_).^2,4) + ...
               0.5 .* sum(RState_YV(:,:,:,B_).^2,4) + ...
               RState_YV(:,:,:,P_) + ...
               0.5 .* sum(RState_YV(:,:,:,B_).^2,4))) - ...
               sum(RState_YV(:,:,:,U_).*RState_YV(:,:,:,B_),4).*...
               RState_YV(:,:,:,By_);
            
            LFlux_ZV(:,:,:,E_) = LState_ZV(:,:,:,Uz_)./...
               LState_ZV(:,:,:,Rho_).* ...
               ((LState_ZV(:,:,:,P_) / (gamma-1) + ...
               0.5 ./ LState_ZV(:,:,:,Rho_).*...
               sum(LState_ZV(:,:,:,U_).^2,4) + ...
               0.5 .* sum(LState_ZV(:,:,:,B_).^2,4) + ...
               LState_ZV(:,:,:,P_) + ...
               0.5 .* sum(LState_ZV(:,:,:,B_).^2,4))) - ...
               sum(LState_ZV(:,:,:,U_).*LState_ZV(:,:,:,B_),4).*...
               LState_ZV(:,:,:,Bz_);
            
            RFlux_ZV(:,:,:,E_) = RState_ZV(:,:,:,Uz_)./...
               RState_ZV(:,:,:,Rho_).* ...
               ((RState_ZV(:,:,:,P_) / (gamma-1) + ...
               0.5 ./ RState_ZV(:,:,:,Rho_).*...
               sum(RState_ZV(:,:,:,U_).^2,4) + ...
               0.5 .* sum(RState_ZV(:,:,:,B_).^2,4) + ...
               RState_ZV(:,:,:,P_) + ...
               0.5 .* sum(RState_ZV(:,:,:,B_).^2,4))) - ...
               sum(RState_ZV(:,:,:,U_).*RState_ZV(:,:,:,B_),4).*...
               RState_ZV(:,:,:,Bz_);
         end
         
         % Collect all the physical fluxes
         obj.Flux_XV = 0.5 * (LFlux_XV + RFlux_XV);
         obj.Flux_YV = 0.5 * (LFlux_YV + RFlux_YV);
         obj.Flux_ZV = 0.5 * (LFlux_ZV + RFlux_ZV);
      end
      
      function add_numerical_flux(obj)
         % Calculate numerical fluxes and add to the physical fluxes.
         %-----------------------------------------------------------------
         
         % Aliases
         LState_XV = obj.faceValue.LState_XV;
         RState_XV = obj.faceValue.RState_XV;
         LState_YV = obj.faceValue.LState_YV;
         RState_YV = obj.faceValue.RState_YV;
         LState_ZV = obj.faceValue.LState_ZV;
         RState_ZV = obj.faceValue.RState_ZV;
         
         if strcmp(Parameters.Scheme,'Rusanov')
            
            [cmax_XF,cmax_YF,cmax_ZF] = obj.get_speed_max;
            
            if ~Parameters.UseConservative
               obj.Flux_XV = obj.Flux_XV - ...
                  0.5*cmax_XF.*(RState_XV - LState_XV);
               obj.Flux_YV = obj.Flux_YV - ...
                  0.5*cmax_YF.*(RState_YV - LState_YV);
               obj.Flux_ZV = obj.Flux_ZV - ...
                  0.5*cmax_ZF.*(RState_ZV - LState_ZV);
            else
               % If I solve energy equation instead of pressure, there's
               % duplicate calculation above, even though the expression looks
               % compact. That's why I use an if-else statement.
               Rho_ = Parameters.Rho_;
               Bz_  = Parameters.Bz_;
               P_   = Parameters.P_;
               E_   = Parameters.E_;
               U_   = Parameters.U_;
               B_   = Parameters.B_;
               gamma= Const.gamma;
               
               obj.Flux_XV(:,:,:,Rho_:Bz_) = ...
                  obj.Flux_XV(:,:,:,Rho_:Bz_) - ...
                  0.5*cmax_XF.*(RState_XV(:,:,:,Rho_:Bz_) - ...
                  LState_XV(:,:,:,Rho_:Bz_));
               obj.Flux_XV(:,:,:,E_) = obj.Flux_XV(:,:,:,E_) - ...
                  0.5*cmax_XF.* (...
                  (RState_XV(:,:,:,P_) / (gamma-1) + ...
                  0.5./RState_XV(:,:,:,Rho_).*...
                  sum(RState_XV(:,:,:,U_).^2,4) + ...
                  0.5*sum(RState_XV(:,:,:,B_).^2,4)) - ...
                  (LState_XV(:,:,:,P_) / (gamma-1) + ...
                  0.5./LState_XV(:,:,:,Rho_).*...
                  sum(LState_XV(:,:,:,U_).^2,4) + ...
                  0.5*sum(LState_XV(:,:,:,B_).^2,4)));
               
               obj.Flux_YV(:,:,:,Rho_:Bz_) = ...
                  obj.Flux_YV(:,:,:,Rho_:Bz_) - ...
                  0.5*cmax_YF.*(RState_YV(:,:,:,Rho_:Bz_) - ...
                  LState_YV(:,:,:,Rho_:Bz_));
               obj.Flux_YV(:,:,:,E_) = obj.Flux_YV(:,:,:,E_) - ...
                  0.5*cmax_YF.* (...
                  (RState_YV(:,:,:,P_) / (gamma-1) + ...
                  0.5./RState_YV(:,:,:,Rho_).*...
                  sum(RState_YV(:,:,:,U_).^2,4) + ...
                  0.5*sum(RState_YV(:,:,:,B_).^2,4)) - ...
                  (LState_YV(:,:,:,P_) / (gamma-1) + ...
                  0.5./LState_YV(:,:,:,Rho_).*...
                  sum(LState_YV(:,:,:,U_).^2,4) + ...
                  0.5*sum(LState_YV(:,:,:,B_).^2,4)));
               
               obj.Flux_ZV(:,:,:,Rho_:Bz_) = ...
                  obj.Flux_ZV(:,:,:,Rho_:Bz_) - ...
                  0.5*cmax_ZF.*(RState_ZV(:,:,:,Rho_:Bz_) - ...
                  LState_ZV(:,:,:,Rho_:Bz_));
               obj.Flux_ZV(:,:,:,E_) = obj.Flux_ZV(:,:,:,E_) - ...
                  0.5*cmax_ZF.* (...
                  (RState_ZV(:,:,:,P_) / (gamma-1) + ...
                  0.5./RState_ZV(:,:,:,Rho_).*...
                  sum(RState_ZV(:,:,:,U_).^2,4) + ...
                  0.5*sum(RState_ZV(:,:,:,B_).^2,4)) - ...
                  (LState_ZV(:,:,:,P_) / (gamma-1) + ...
                  0.5./LState_ZV(:,:,:,Rho_).*...
                  sum(LState_ZV(:,:,:,U_).^2,4) + ...
                  0.5*sum(LState_ZV(:,:,:,B_).^2,4)));
            end
         end
      end
      
   end
   
   
   methods (Access = private)
      function mm = minmod(v)
         % Using Harten's generalized definition
         % minmod: zero if opposite sign, otherwise the one of smaller magnitude.
         %m=size(v,1); mm=zeros(size(v,2),1); s=sum(sign(v),2)/m; ids=find(abs(s)==1);
         %if(~isempty(ids)); mm(ids)=s(ids).*min(abs(v(ids,:)),[],2); end
         s = sum(sign(v))/numel(v);
         if abs(s)==1; mm = s*min(abs(v(:))); else mm=0; end
      end
      
      function [cmax_XF,cmax_YF,cmax_ZF] = get_speed_max(obj)
         % Calculate the maximum speed in each direction.
         gamma = Const.gamma;
         
         % Aliases
         LS_XV = obj.faceValue.LState_XV; RS_XV = obj.faceValue.RState_XV;
         LS_YV = obj.faceValue.LState_YV; RS_YV = obj.faceValue.RState_YV;
         LS_ZV = obj.faceValue.LState_ZV; RS_ZV = obj.faceValue.RState_ZV;
         
         Rho_ = Parameters.Rho_;
         Ux_  = Parameters.Ux_;
         Uy_  = Parameters.Uy_;
         Uz_  = Parameters.Uz_;
         Bx_  = Parameters.Bx_;
         By_  = Parameters.By_;
         Bz_  = Parameters.Bz_;
         P_   = Parameters.P_;
         %U_   = Parameters.U_;
         %B_   = Parameters.B_;
         
         % Maybe use this for speed?
         %rho_VX = LState_VX(Rho_,:,:,:) + RState_VX(Rho_,:,:,:);
         
         Cs2_XF = gamma*(LS_XV(:,:,:,P_) + RS_XV(:,:,:,P_)) ./...
            (LS_XV(:,:,:,Rho_) + RS_XV(:,:,:,Rho_));
         Cs2_YF = gamma*(LS_YV(:,:,:,P_) + RS_YV(:,:,:,P_)) ./...
            (LS_YV(:,:,:,Rho_) + RS_YV(:,:,:,Rho_));
         Cs2_ZF = gamma*(LS_ZV(:,:,:,P_) + RS_ZV(:,:,:,P_)) ./...
            (LS_ZV(:,:,:,Rho_) + RS_ZV(:,:,:,Rho_));
         
         Ca2_XF = ( (LS_XV(:,:,:,Bx_) + RS_XV(:,:,:,Bx_)).^2 + ...
            (LS_XV(:,:,:,By_) + RS_XV(:,:,:,By_)).^2 + ...
            (LS_XV(:,:,:,Bz_) + RS_XV(:,:,:,Bz_)).^2 ) ./ ...
            (2 * LS_XV(:,:,:,Rho_) + RS_XV(:,:,:,Rho_));
         Ca2_YF = ( (LS_YV(:,:,:,Bx_) + RS_YV(:,:,:,Bx_)).^2 + ...
            (LS_YV(:,:,:,By_) + RS_YV(:,:,:,By_)).^2 + ...
            (LS_YV(:,:,:,Bz_) + RS_YV(:,:,:,Bz_)).^2 ) ./ ...
            (2 * LS_YV(:,:,:,Rho_) + RS_YV(:,:,:,Rho_));
         Ca2_ZF = ( (LS_ZV(:,:,:,Bx_) + RS_ZV(:,:,:,Bx_)).^2 + ...
            (LS_ZV(:,:,:,By_) + RS_ZV(:,:,:,By_)).^2 + ...
            (LS_ZV(:,:,:,Bz_) + RS_ZV(:,:,:,Bz_)).^2 ) ./ ...
            (2 * LS_ZV(:,:,:,Rho_) + RS_ZV(:,:,:,Rho_));
         
         Can2_XF = ( (LS_XV(:,:,:,Bx_) + RS_XV(:,:,:,Bx_)).^2 ) ./ ...
            (2 * LS_XV(:,:,:,Rho_) + RS_XV(:,:,:,Rho_));
         Can2_YF = ( (LS_YV(:,:,:,By_) + RS_YV(:,:,:,By_)).^2 ) ./ ...
            (2 * LS_YV(:,:,:,Rho_) + RS_YV(:,:,:,Rho_));
         Can2_ZF = ( (LS_ZV(:,:,:,Bz_) + RS_ZV(:,:,:,Bz_)).^2 ) ./ ...
            (2 * LS_ZV(:,:,:,Rho_) + RS_ZV(:,:,:,Rho_));
         
         cmax_XF = ...
            0.5 * abs(LS_XV(:,:,:,Ux_)./LS_XV(:,:,:,Rho_) + ...
            RS_XV(:,:,:,Ux_)./RS_XV(:,:,:,Rho_)) + ...
            sqrt( 0.5*(Cs2_XF + Ca2_XF + ...
            sqrt((Cs2_XF + Ca2_XF).^2-4*Cs2_XF.*Can2_XF)) );
         
         cmax_YF = ...
            0.5 * abs(LS_YV(:,:,:,Uy_)./LS_YV(:,:,:,Rho_) + ...
            RS_YV(:,:,:,Uy_)./RS_YV(:,:,:,Rho_)) + ...
            sqrt( 0.5*(Cs2_YF + Ca2_YF + ...
            sqrt((Cs2_YF + Ca2_YF).^2-4*Cs2_YF.*Can2_YF)) );
         
         cmax_ZF = ...
            0.5 * abs(LS_ZV(:,:,:,Uz_)./LS_ZV(:,:,:,Rho_) + ...
            RS_ZV(:,:,:,Uz_)./RS_ZV(:,:,:,Rho_)) + ...
            sqrt( 0.5*(Cs2_ZF + Ca2_ZF + ...
            sqrt((Cs2_ZF + Ca2_ZF).^2-4*Cs2_ZF.*Can2_ZF)) );
      end   
      
   end
   
end

