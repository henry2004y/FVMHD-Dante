classdef FaceFlux < handle
   %FaceFlux Class of fluxes
   % This class holds all data and operations pertinent to the fluxes.
   
   %======================== MEMBERS =================================
   properties (GetAccess = public, SetAccess = private)
      Flux_VX(:,:,:,:)  double {mustBeReal}
      Flux_VY(:,:,:,:)  double {mustBeReal}
      Flux_VZ(:,:,:,:)  double {mustBeReal}
   end
   
   properties (GetAccess = private, SetAccess = private)
      faceValue % Face values
   end
   
   %======================== CONSTRUCTORS ============================
   methods (Access = public)
      function obj = FaceFlux(faceValue)
         % Initialize an instance of this class
                  
         obj.faceValue = faceValue;
      end
   end
   
   %======================== METHODS =================================
   methods (Access = public)
      function obj = calc_face_flux(obj)
         % Calculate the face fluxes in generalized coordinates from face
         % values on the left and right of the face
         %-----------------------------------------------------------------
                  
         obj.get_physical_flux;
         obj.add_numerical_flux;
      end
      
      function get_physical_flux(obj)
         % Calculate the physical fluxes
         %INPUT:
         %  FaceValue Class object
         %OUTPUT:
         %  Fluxes in 3 directions
         %-----------------------------------------------------------------
         
         % Aliases
         LState_VX = obj.faceValue.LState_VX;
         RState_VX = obj.faceValue.RState_VX;
         LState_VY = obj.faceValue.LState_VY;
         RState_VY = obj.faceValue.RState_VY;
         LState_VZ = obj.faceValue.LState_VZ;
         RState_VZ = obj.faceValue.RState_VZ;
             
         nVar = Parameters.nVar;
         GridSize = Parameters.GridSize;

         Rho_ = Parameters.Rho_;
         Ux_  = Parameters.Ux_;
         Uy_  = Parameters.Uy_;
         Uz_  = Parameters.Uz_;
         Bx_  = Parameters.Bx_;
         By_  = Parameters.By_;
         Bz_  = Parameters.Bz_;
         P_   = Parameters.P_;
         E_   = Parameters.E_;
         U_   = Parameters.U_;
         B_   = Parameters.B_;
         
         LFlux_VX = Inf([nVar,GridSize+[1 0 0]]);
         RFlux_VX = Inf([nVar,GridSize+[1 0 0]]);
         LFlux_VY = Inf([nVar,GridSize+[0 1 0]]);
         RFlux_VY = Inf([nVar,GridSize+[0 1 0]]);
         LFlux_VZ = Inf([nVar,GridSize+[0 0 1]]);
         RFlux_VZ = Inf([nVar,GridSize+[0 0 1]]);
         
         % Density flux
         LFlux_VX(Rho_,:,:,:) = LState_VX(Ux_,:,:,:);
         RFlux_VX(Rho_,:,:,:) = RState_VX(Ux_,:,:,:);
         LFlux_VY(Rho_,:,:,:) = LState_VY(Uy_,:,:,:);
         RFlux_VY(Rho_,:,:,:) = RState_VY(Uy_,:,:,:);
         LFlux_VZ(Rho_,:,:,:) = LState_VZ(Uz_,:,:,:);
         RFlux_VZ(Rho_,:,:,:) = RState_VZ(Uz_,:,:,:);
         
         % Momentum flux
         LFlux_VX(Ux_,:,:,:) = ...
            LState_VX(Ux_,:,:,:).^2 ./ LState_VX(Rho_,:,:,:) + ...
            LState_VX(P_,:,:,:) + ...
            0.5*sum(LState_VX(B_,:,:,:).^2,1) - ...
            LState_VX(Bx_,:,:,:).^2;
         RFlux_VX(Ux_,:,:,:) = ...
            RState_VX(Ux_,:,:,:).^2 ./ RState_VX(Rho_,:,:,:) + ...
            RState_VX(P_,:,:,:) + ...
            0.5*sum(RState_VX(B_,:,:,:).^2,1) - ...
            RState_VX(Bx_,:,:,:).^2;
         LFlux_VX(Uy_,:,:,:) = LState_VX(Ux_,:,:,:) .* ...
            LState_VX(Uy_,:,:,:) ./ LState_VX(Rho_,:,:,:) - ...
            LState_VX(Bx_,:,:,:).*LState_VX(By_,:,:,:);
         RFlux_VX(Uy_,:,:,:) = RState_VX(Ux_,:,:,:) .* ...
            RState_VX(Uy_,:,:,:) ./ RState_VX(Rho_,:,:,:) - ...
            RState_VX(Bx_,:,:,:).*RState_VX(By_,:,:,:);
         LFlux_VX(Uz_,:,:,:) = LState_VX(Ux_,:,:,:) .* ...
            LState_VX(Uz_,:,:,:) ./ LState_VX(Rho_,:,:,:)- ...
            LState_VX(Bx_,:,:,:).*LState_VX(Bz_,:,:,:);
         RFlux_VX(Uz_,:,:,:) = RState_VX(Ux_,:,:,:) .* ...
            RState_VX(Uz_,:,:,:) ./ RState_VX(Rho_,:,:,:) - ...
            RState_VX(Bx_,:,:,:).*RState_VX(Bz_,:,:,:);
         
         LFlux_VY(Ux_,:,:,:) = LState_VY(Uy_,:,:,:) .* ...
            LState_VY(Ux_,:,:,:) ./ LState_VY(Rho_,:,:,:) - ...
            LState_VY(By_,:,:,:).*LState_VY(Bx_,:,:,:);
         RFlux_VY(Ux_,:,:,:) = RState_VY(Uy_,:,:,:) .* ...
            RState_VY(Ux_,:,:,:) ./ RState_VY(Rho_,:,:,:) - ...
            RState_VY(By_,:,:,:).*RState_VY(Bx_,:,:,:);
         LFlux_VY(Uy_,:,:,:) = ...
            LState_VY(Uy_,:,:,:).^2 ./ LState_VY(Rho_,:,:,:) + ...
            LState_VY(P_,:,:,:) + ...
            0.5*sum(LState_VY(B_,:,:,:).^2,1) - ...
            LState_VY(By_,:,:,:).^2;
         RFlux_VY(Uy_,:,:,:) = ...
            RState_VY(Uy_,:,:,:).^2 ./ RState_VY(Rho_,:,:,:) + ...
            RState_VY(P_,:,:,:) + ...
            0.5*sum(RState_VY(B_,:,:,:).^2,1) - ...
            RState_VY(By_,:,:,:).^2;
         LFlux_VY(Uz_,:,:,:) = LState_VY(Uy_,:,:,:) .* ...
            LState_VY(Uz_,:,:,:) ./ LState_VY(Rho_,:,:,:)- ...
            LState_VY(Bx_,:,:,:).*LState_VY(Bz_,:,:,:);
         RFlux_VY(Uz_,:,:,:) = RState_VY(Uy_,:,:,:) .* ...
            RState_VY(Uz_,:,:,:) ./ RState_VY(Rho_,:,:,:)- ...
            RState_VY(Bx_,:,:,:).*RState_VY(Bz_,:,:,:);
         
         LFlux_VZ(Ux_,:,:,:) = LState_VZ(Uz_,:,:,:) .* ...
            LState_VZ(Ux_,:,:,:) ./ LState_VZ(Rho_,:,:,:)- ...
            LState_VZ(Bz_,:,:,:).*LState_VZ(Bx_,:,:,:);
         RFlux_VZ(Ux_,:,:,:) = RState_VZ(Uz_,:,:,:) .* ...
            RState_VZ(Ux_,:,:,:) ./ RState_VZ(Rho_,:,:,:)- ...
            RState_VZ(Bz_,:,:,:).*RState_VZ(Bx_,:,:,:);
         LFlux_VZ(Uy_,:,:,:) = LState_VZ(Uz_,:,:,:) .* ...
            LState_VZ(Uy_,:,:,:) ./ LState_VZ(Rho_,:,:,:)- ...
            LState_VZ(Bz_,:,:,:).*LState_VZ(By_,:,:,:);
         RFlux_VZ(Uy_,:,:,:) = RState_VZ(Uz_,:,:,:) .* ...
            RState_VZ(Uy_,:,:,:) ./ RState_VZ(Rho_,:,:,:)- ...
            RState_VZ(Bz_,:,:,:).*RState_VZ(By_,:,:,:);
         LFlux_VZ(Uz_,:,:,:) = ...
            LState_VZ(Uz_,:,:,:).^2 ./ LState_VZ(Rho_,:,:,:) + ...
            LState_VZ(P_,:,:,:) + ...
            0.5*sum(LState_VZ(B_,:,:,:).^2,1) - ...
            LState_VZ(Bz_,:,:,:).^2;
         RFlux_VZ(Uz_,:,:,:) = ...
            RState_VZ(Uz_,:,:,:).^2 ./ RState_VZ(Rho_,:,:,:) + ...
            RState_VZ(P_,:,:,:) + ...
            0.5*sum(RState_VZ(B_,:,:,:).^2,1) - ...
            RState_VZ(Bz_,:,:,:).^2;
         
         % Magnetic flux
         LFlux_VX(Bx_,:,:,:) = 0;
         RFlux_VX(Bx_,:,:,:) = 0;
         LFlux_VX(By_,:,:,:) = LState_VX(Ux_,:,:,:).*...
            LState_VX(By_,:,:,:) - LState_VX(Bx_,:,:,:).*...
            LState_VX(Uy_,:,:,:);
         RFlux_VX(By_,:,:,:) = RState_VX(Ux_,:,:,:).*...
            RState_VX(By_,:,:,:) - RState_VX(Bx_,:,:,:).*...
            RState_VX(Uy_,:,:,:);
         LFlux_VX(Bz_,:,:,:) = LState_VX(Ux_,:,:,:).*...
            LState_VX(Bz_,:,:,:) - LState_VX(Bx_,:,:,:).*...
            LState_VX(Uz_,:,:,:);
         RFlux_VX(Bz_,:,:,:) = RState_VX(Ux_,:,:,:).*...
            RState_VX(Bz_,:,:,:) - RState_VX(Bx_,:,:,:).*...
            RState_VX(Uz_,:,:,:);
         
         LFlux_VY(Bx_,:,:,:) = LState_VY(Uy_,:,:,:).*...
            LState_VY(Bx_,:,:,:) - LState_VY(By_,:,:,:).*...
            LState_VY(Ux_,:,:,:);
         RFlux_VY(Bx_,:,:,:) = RState_VY(Uy_,:,:,:).*...
            RState_VY(Bx_,:,:,:) - RState_VY(By_,:,:,:).*...
            RState_VY(Ux_,:,:,:);
         LFlux_VY(By_,:,:,:) = 0;
         RFlux_VY(By_,:,:,:) = 0;
         LFlux_VY(Bz_,:,:,:) = LState_VY(Uy_,:,:,:).*...
            LState_VY(Bz_,:,:,:) - LState_VY(By_,:,:,:).*...
            LState_VY(Uz_,:,:,:);
         RFlux_VY(Bz_,:,:,:) = RState_VY(Uy_,:,:,:).*...
            RState_VY(Bz_,:,:,:) - RState_VY(By_,:,:,:).*...
            RState_VY(Uz_,:,:,:);
         
         LFlux_VZ(Bx_,:,:,:) = LState_VZ(Uz_,:,:,:).*...
            LState_VZ(Bx_,:,:,:) - LState_VZ(Bz_,:,:,:).*...
            LState_VZ(Ux_,:,:,:);
         RFlux_VZ(Bx_,:,:,:) = RState_VZ(Uz_,:,:,:).*...
            RState_VZ(Bx_,:,:,:) - RState_VZ(Bz_,:,:,:).*...
            RState_VZ(Ux_,:,:,:);
         LFlux_VZ(By_,:,:,:) = LState_VZ(Uz_,:,:,:).*...
            LState_VZ(By_,:,:,:) - LState_VZ(Bz_,:,:,:).*...
            LState_VZ(Uy_,:,:,:);
         RFlux_VZ(By_,:,:,:) = RState_VZ(Uz_,:,:,:).*...
            RState_VZ(By_,:,:,:) - RState_VZ(Bz_,:,:,:).*...
            RState_VZ(Uy_,:,:,:);
         LFlux_VZ(Bz_,:,:,:) = 0;
         RFlux_VZ(Bz_,:,:,:) = 0;
         
         % Pressure flux / energy flux
         if ~Parameters.UseConservative
            LFlux_VX(P_,:,:,:) = LState_VX(P_,:,:,:).*...
               LState_VX(Ux_,:,:,:)./LState_VX(Rho_,:,:,:);
            RFlux_VX(P_,:,:,:) = RState_VX(P_,:,:,:).*...
               RState_VX(Ux_,:,:,:)./RState_VX(Rho_,:,:,:);
            LFlux_VY(P_,:,:,:) = LState_VY(P_,:,:,:).*...
               LState_VY(Uy_,:,:,:)./LState_VY(Rho_,:,:,:);
            RFlux_VY(P_,:,:,:) = RState_VY(P_,:,:,:).*...
               RState_VY(Uy_,:,:,:)./RState_VY(Rho_,:,:,:);
            LFlux_VZ(P_,:,:,:) = LState_VZ(P_,:,:,:).*...
               LState_VZ(Uz_,:,:,:)./LState_VZ(Rho_,:,:,:);
            RFlux_VZ(P_,:,:,:) = RState_VZ(P_,:,:,:).*...
               RState_VZ(Uz_,:,:,:)./RState_VZ(Rho_,:,:,:);
         else
            % Currently I am using the same index for pressure/energy
            gamma = Const.gamma;
            
            LFlux_VX(E_,:,:,:) = LState_VX(Ux_,:,:,:)./...
               LState_VX(Rho_,:,:,:).* ...
               ((LState_VX(P_,:,:,:) / (gamma-1) + ...
               0.5 ./ LState_VX(Rho_,:,:,:).*...
               sum(LState_VX(U_,:,:,:).^2,1) + ...
               0.5 .* sum(LState_VX(B_,:,:,:).^2,1) + ...
               LState_VX(P_,:,:,:) + ...
               0.5 .* sum(LState_VX(B_,:,:,:).^2,1))) - ...
               sum(LState_VX(U_,:,:,:).*LState_VX(B_,:,:,:),1).*...
               LState_VX(Bx_,:,:,:);
            
            RFlux_VX(E_,:,:,:) = RState_VX(Ux_,:,:,:)./...
               RState_VX(Rho_,:,:,:).* ...
               ((RState_VX(P_,:,:,:) / (gamma-1) + ...
               0.5 ./ RState_VX(Rho_,:,:,:).*...
               sum(RState_VX(U_,:,:,:).^2,1) + ...
               0.5 .* sum(RState_VX(B_,:,:,:).^2,1) + ...
               RState_VX(P_,:,:,:) + ...
               0.5 .* sum(RState_VX(B_,:,:,:).^2,1))) - ...
               sum(RState_VX(U_,:,:,:).*RState_VX(B_,:,:,:),1).*...
               RState_VX(Bx_,:,:,:);
            
            LFlux_VY(E_,:,:,:) = LState_VY(Uy_,:,:,:)./...
               LState_VY(Rho_,:,:,:).* ...
               ((LState_VY(P_,:,:,:) / (gamma-1) + ...
               0.5 ./ LState_VY(Rho_,:,:,:).*...
               sum(LState_VY(U_,:,:,:).^2,1) + ...
               0.5 .* sum(LState_VY(B_,:,:,:).^2,1) + ...
               LState_VY(P_,:,:,:) + ...
               0.5 .* sum(LState_VY(B_,:,:,:).^2,1))) - ...
               sum(LState_VY(U_,:,:,:).*LState_VY(B_,:,:,:),1).*...
               LState_VY(By_,:,:,:);
            
            RFlux_VY(E_,:,:,:) = RState_VY(Uy_,:,:,:)./...
               RState_VY(Rho_,:,:,:).* ...
               ((RState_VY(P_,:,:,:) / (gamma-1) + ...
               0.5 ./ RState_VY(Rho_,:,:,:).*...
               sum(RState_VY(U_,:,:,:).^2,1) + ...
               0.5 .* sum(RState_VY(B_,:,:,:).^2,1) + ...
               RState_VY(P_,:,:,:) + ...
               0.5 .* sum(RState_VY(B_,:,:,:).^2,1))) - ...
               sum(RState_VY(U_,:,:,:).*RState_VY(B_,:,:,:),1).*...
               RState_VY(By_,:,:,:);
            
            LFlux_VZ(E_,:,:,:) = LState_VZ(Uz_,:,:,:)./...
               LState_VZ(Rho_,:,:,:).* ...
               ((LState_VZ(P_,:,:,:) / (gamma-1) + ...
               0.5 ./ LState_VZ(Rho_,:,:,:).*...
               sum(LState_VZ(U_,:,:,:).^2,1) + ...
               0.5 .* sum(LState_VZ(B_,:,:,:).^2,1) + ...
               LState_VZ(P_,:,:,:) + ...
               0.5 .* sum(LState_VZ(B_,:,:,:).^2,1))) - ...
               sum(LState_VZ(U_,:,:,:).*LState_VZ(B_,:,:,:),1).*...
               LState_VZ(Bz_,:,:,:);
            
            RFlux_VZ(E_,:,:,:) = RState_VZ(Uz_,:,:,:)./...
               RState_VZ(Rho_,:,:,:).* ...
               ((RState_VZ(P_,:,:,:) / (gamma-1) + ...
               0.5 ./ RState_VZ(Rho_,:,:,:).*...
               sum(RState_VZ(U_,:,:,:).^2,1) + ...
               0.5 .* sum(RState_VZ(B_,:,:,:).^2,1) + ...
               RState_VZ(P_,:,:,:) + ...
               0.5 .* sum(RState_VZ(B_,:,:,:).^2,1))) - ...
               sum(RState_VZ(U_,:,:,:).*RState_VZ(B_,:,:,:),1).*...
               RState_VZ(Bz_,:,:,:);
         end
         
         % Collect all the physical fluxes
         obj.Flux_VX = 0.5 * (LFlux_VX + RFlux_VX);
         obj.Flux_VY = 0.5 * (LFlux_VY + RFlux_VY);
         obj.Flux_VZ = 0.5 * (LFlux_VZ + RFlux_VZ);
      end
      
      function add_numerical_flux(obj)
         % Calculate numerical fluxes and add to the physical fluxes.
         %-----------------------------------------------------------------
         
         % Aliases
         LState_VX = obj.faceValue.LState_VX;
         RState_VX = obj.faceValue.RState_VX;
         LState_VY = obj.faceValue.LState_VY;
         RState_VY = obj.faceValue.RState_VY;
         LState_VZ = obj.faceValue.LState_VZ;
         RState_VZ = obj.faceValue.RState_VZ;
         
         if strcmp(Parameters.Scheme,'Rusanov')
            
            [cmax_XF,cmax_YF,cmax_ZF] = obj.get_speed_max;
            
            if ~Parameters.UseConservative
               obj.Flux_VX = obj.Flux_VX - ...
                  0.5*cmax_XF.*(RState_VX - LState_VX);
               obj.Flux_VY = obj.Flux_VY - ...
                  0.5*cmax_YF.*(RState_VY - LState_VY);
               obj.Flux_VZ = obj.Flux_VZ - ...
                  0.5*cmax_ZF.*(RState_VZ - LState_VZ);
            else
               % If I solve energy equation instead of pressure, there's
               % duplicate calculation above, even though the expression looks
               % compact. That's why I use an if-else statement.
               Rho_ = Parameters.Rho_;
               Bz_  = Parameters.Bz_;
               P_   = Parameters.P_;
               E_   = Parameters.E_;
               U_   = Parameters.U_;
               B_   = Parameters.B_;
               gamma= Const.gamma;
               
               obj.Flux_VX(Rho_:Bz_,:,:,:) = ...
                  obj.Flux_VX(Rho_:Bz_,:,:,:) - ...
                  0.5*cmax_XF.*(RState_VX(Rho_:Bz_,:,:,:) - ...
                  LState_VX(Rho_:Bz_,:,:,:));
               obj.Flux_VX(E_,:,:,:) = obj.Flux_VX(E_,:,:,:) - ...
                  0.5*cmax_XF.* (...
                  (RState_VX(P_,:,:,:) / (gamma-1) + ...
                  0.5./RState_VX(Rho_,:,:,:).*...
                  sum(RState_VX(U_,:,:,:).^2,1) + ...
                  0.5*sum(RState_VX(B_,:,:,:).^2,1)) - ...
                  (LState_VX(P_,:,:,:) / (gamma-1) + ...
                  0.5./LState_VX(Rho_,:,:,:).*...
                  sum(LState_VX(U_,:,:,:).^2,1) + ...
                  0.5*sum(LState_VX(B_,:,:,:).^2,1)));
               
               obj.Flux_VY(Rho_:Bz_,:,:,:) = ...
                  obj.Flux_VY(Rho_:Bz_,:,:,:) - ...
                  0.5*cmax_YF.*(RState_VY(Rho_:Bz_,:,:,:) - ...
                  LState_VY(Rho_:Bz_,:,:,:));
               obj.Flux_VY(E_,:,:,:) = obj.Flux_VY(E_,:,:,:) - ...
                  0.5*cmax_YF.* (...
                  (RState_VY(P_,:,:,:) / (gamma-1) + ...
                  0.5./RState_VY(Rho_,:,:,:).*...
                  sum(RState_VY(U_,:,:,:).^2,1) + ...
                  0.5*sum(RState_VY(B_,:,:,:).^2,1)) - ...
                  (LState_VY(P_,:,:,:) / (gamma-1) + ...
                  0.5./LState_VY(Rho_,:,:,:).*...
                  sum(LState_VY(U_,:,:,:).^2,1) + ...
                  0.5*sum(LState_VY(B_,:,:,:).^2,1)));
               
               obj.Flux_VZ(Rho_:Bz_,:,:,:) = ...
                  obj.Flux_VZ(Rho_:Bz_,:,:,:) - ...
                  0.5*cmax_ZF.*(RState_VZ(Rho_:Bz_,:,:,:) - ...
                  LState_VZ(Rho_:Bz_,:,:,:));
               obj.Flux_VZ(E_,:,:,:) = obj.Flux_VZ(E_,:,:,:) - ...
                  0.5*cmax_ZF.* (...
                  (RState_VZ(P_,:,:,:) / (gamma-1) + ...
                  0.5./RState_VZ(Rho_,:,:,:).*...
                  sum(RState_VZ(U_,:,:,:).^2,1) + ...
                  0.5*sum(RState_VZ(B_,:,:,:).^2,1)) - ...
                  (LState_VZ(P_,:,:,:) / (gamma-1) + ...
                  0.5./LState_VZ(Rho_,:,:,:).*...
                  sum(LState_VZ(U_,:,:,:).^2,1) + ...
                  0.5*sum(LState_VZ(B_,:,:,:).^2,1)));
            end
         end
      end
      
   end
   
   
   methods (Access = private)
      function mm = minmod(v)
         % Using Harten's generalized definition
         % minmod: zero if opposite sign, otherwise the one of smaller magnitude.
         %m=size(v,1); mm=zeros(size(v,2),1); s=sum(sign(v),2)/m; ids=find(abs(s)==1);
         %if(~isempty(ids)); mm(ids)=s(ids).*min(abs(v(ids,:)),[],2); end
         s = sum(sign(v))/numel(v);
         if abs(s)==1; mm = s*min(abs(v(:))); else mm=0; end
      end
      
      function [cmax_XF,cmax_YF,cmax_ZF] = get_speed_max(obj)
         % Calculate the maximum speed in each direction.
         gamma = Const.gamma;
         
         % Aliases
         LS_VX = obj.faceValue.LState_VX; RS_VX = obj.faceValue.RState_VX;
         LS_VY = obj.faceValue.LState_VY; RS_VY = obj.faceValue.RState_VY;
         LS_VZ = obj.faceValue.LState_VZ; RS_VZ = obj.faceValue.RState_VZ;
         
         Rho_ = Parameters.Rho_;
         Ux_  = Parameters.Ux_;
         Uy_  = Parameters.Uy_;
         Uz_  = Parameters.Uz_;
         Bx_  = Parameters.Bx_;
         By_  = Parameters.By_;
         Bz_  = Parameters.Bz_;
         P_   = Parameters.P_;
         %U_   = Parameters.U_;
         %B_   = Parameters.B_;
         
         % Maybe use this for speed?
         %rho_VX = LState_VX(Rho_,:,:,:) + RState_VX(Rho_,:,:,:);
         
         Cs2_XF = gamma*(LS_VX(P_,:,:,:) + RS_VX(P_,:,:,:)) ./...
            (LS_VX(Rho_,:,:,:) + RS_VX(Rho_,:,:,:));
         Cs2_YF = gamma*(LS_VY(P_,:,:,:) + RS_VY(P_,:,:,:)) ./...
            (LS_VY(Rho_,:,:,:) + RS_VY(Rho_,:,:,:));
         Cs2_ZF = gamma*(LS_VZ(P_,:,:,:) + RS_VZ(P_,:,:,:)) ./...
            (LS_VZ(Rho_,:,:,:) + RS_VZ(Rho_,:,:,:));
         
         Ca2_XF = ( (LS_VX(Bx_,:,:,:) + RS_VX(Bx_,:,:,:)).^2 + ...
            (LS_VX(By_,:,:,:) + RS_VX(By_,:,:,:)).^2 + ...
            (LS_VX(Bz_,:,:,:) + RS_VX(Bz_,:,:,:)).^2 ) ./ ...
            (2 * LS_VX(Rho_,:,:,:) + RS_VX(Rho_,:,:,:));
         Ca2_YF = ( (LS_VY(Bx_,:,:,:) + RS_VY(Bx_,:,:,:)).^2 + ...
            (LS_VY(By_,:,:,:) + RS_VY(By_,:,:,:)).^2 + ...
            (LS_VY(Bz_,:,:,:) + RS_VY(Bz_,:,:,:)).^2 ) ./ ...
            (2 * LS_VY(Rho_,:,:,:) + RS_VY(Rho_,:,:,:));
         Ca2_ZF = ( (LS_VZ(Bx_,:,:,:) + RS_VZ(Bx_,:,:,:)).^2 + ...
            (LS_VZ(By_,:,:,:) + RS_VZ(By_,:,:,:)).^2 + ...
            (LS_VZ(Bz_,:,:,:) + RS_VZ(Bz_,:,:,:)).^2 ) ./ ...
            (2 * LS_VZ(Rho_,:,:,:) + RS_VZ(Rho_,:,:,:));
         
         Can2_XF = ( (LS_VX(Bx_,:,:,:) + RS_VX(Bx_,:,:,:)).^2 ) ./ ...
            (2 * LS_VX(Rho_,:,:,:) + RS_VX(Rho_,:,:,:));
         Can2_YF = ( (LS_VY(By_,:,:,:) + RS_VY(By_,:,:,:)).^2 ) ./ ...
            (2 * LS_VY(Rho_,:,:,:) + RS_VY(Rho_,:,:,:));
         Can2_ZF = ( (LS_VZ(Bz_,:,:,:) + RS_VZ(Bz_,:,:,:)).^2 ) ./ ...
            (2 * LS_VZ(Rho_,:,:,:) + RS_VZ(Rho_,:,:,:));
         
         cmax_XF = ...
            0.5 * abs(LS_VX(Ux_,:,:,:)./LS_VX(Rho_,:,:,:) + ...
            RS_VX(Ux_,:,:,:)./RS_VX(Rho_,:,:,:)) + ...
            sqrt( 0.5*(Cs2_XF + Ca2_XF + ...
            sqrt((Cs2_XF + Ca2_XF).^2-4*Cs2_XF.*Can2_XF)) );
         
         cmax_YF = ...
            0.5 * abs(LS_VY(Uy_,:,:,:)./LS_VY(Rho_,:,:,:) + ...
            RS_VY(Uy_,:,:,:)./RS_VY(Rho_,:,:,:)) + ...
            sqrt( 0.5*(Cs2_YF + Ca2_YF + ...
            sqrt((Cs2_YF + Ca2_YF).^2-4*Cs2_YF.*Can2_YF)) );
         
         cmax_ZF = ...
            0.5 * abs(LS_VZ(Uz_,:,:,:)./LS_VZ(Rho_,:,:,:) + ...
            RS_VZ(Uz_,:,:,:)./RS_VZ(Rho_,:,:,:)) + ...
            sqrt( 0.5*(Cs2_ZF + Ca2_ZF + ...
            sqrt((Cs2_ZF + Ca2_ZF).^2-4*Cs2_ZF.*Can2_ZF)) );
      end   
      
   end
   
end

